// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: doc.flex

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;


public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xTYPE_REF = 12;
  public static final int xCLASS = 14;
  public static final int xCLASS_GENERIC = 16;
  public static final int xCLASS_EXTEND = 18;
  public static final int xFIELD = 20;
  public static final int xFIELD_INDEX = 22;
  public static final int xFIELD_ID = 24;
  public static final int xGENERIC = 26;
  public static final int xALIAS = 28;
  public static final int xDOUBLE_QUOTED_STRING = 30;
  public static final int xSINGLE_QUOTED_STRING = 32;
  public static final int xBACKTICK_STRING = 34;
  public static final int xMODULE = 36;
  public static final int xTAG_ENUMFIELD = 38;
  public static final int xTAG_DIAGNOSTIC = 40;
  public static final int xENUM = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 19, 19
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\5\1\7\1\10\1\11\2\5\1\12\1\13"+
    "\1\14\1\0\1\5\1\15\1\16\1\17\1\5\12\20"+
    "\1\21\1\5\1\22\1\5\1\23\1\24\1\25\32\26"+
    "\1\27\1\30\1\31\1\5\1\26\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\26\1\42\1\26"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\26\1\51"+
    "\1\52\1\53\1\54\1\55\2\26\1\56\1\26\1\57"+
    "\1\60\1\61\1\5\6\0\1\62\32\0\1\63\1\5"+
    "\4\11\4\5\1\11\2\5\1\0\7\5\1\11\4\5"+
    "\1\11\5\5\27\11\1\5\37\11\1\5\u01ca\11\4\5"+
    "\14\11\16\5\5\11\7\5\1\11\1\5\1\11\21\5"+
    "\160\0\5\11\1\5\2\11\2\5\4\11\1\5\1\11"+
    "\6\5\1\11\1\5\3\11\1\5\1\11\1\5\24\11"+
    "\1\5\123\11\1\5\213\11\1\5\5\0\2\5\246\11"+
    "\1\5\46\11\2\5\1\11\6\5\51\11\6\5\1\11"+
    "\1\5\55\0\1\5\1\0\1\5\2\0\1\5\2\0"+
    "\1\5\1\0\10\5\33\11\4\5\4\11\15\5\6\0"+
    "\5\5\1\11\4\5\13\0\1\5\1\0\3\5\53\11"+
    "\37\0\4\5\2\11\1\0\143\11\1\5\1\11\10\0"+
    "\1\5\6\0\2\11\2\0\1\5\4\0\2\11\12\0"+
    "\3\11\2\5\1\11\17\5\1\0\1\11\1\0\36\11"+
    "\33\0\2\5\131\11\13\0\1\11\16\5\12\0\41\11"+
    "\11\0\2\11\4\5\1\11\2\5\1\0\30\11\4\0"+
    "\1\11\11\0\1\11\3\0\1\11\5\0\22\5\31\11"+
    "\3\0\4\5\13\11\65\5\25\11\1\5\22\11\13\5"+
    "\61\0\66\11\3\0\1\11\22\0\1\11\7\0\12\11"+
    "\2\0\2\5\12\0\1\5\20\11\3\0\1\5\10\11"+
    "\2\5\2\11\2\5\26\11\1\5\7\11\1\5\1\11"+
    "\3\5\4\11\2\5\1\0\1\11\7\0\2\5\2\0"+
    "\2\5\3\0\1\11\10\5\1\0\4\5\2\11\1\5"+
    "\3\11\2\0\2\5\12\0\4\11\7\5\2\11\1\5"+
    "\1\0\2\5\3\0\1\5\6\11\4\5\2\11\2\5"+
    "\26\11\1\5\7\11\1\5\2\11\1\5\2\11\1\5"+
    "\2\11\2\5\1\0\1\5\5\0\4\5\2\0\2\5"+
    "\3\0\3\5\1\0\7\5\4\11\1\5\1\11\7\5"+
    "\14\0\3\11\1\0\13\5\3\0\1\5\11\11\1\5"+
    "\3\11\1\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\5\11\2\5\1\0\1\11\10\0\1\5\3\0\1\5"+
    "\3\0\2\5\1\11\17\5\2\11\2\0\2\5\12\0"+
    "\1\5\1\11\7\5\1\11\6\0\1\5\3\0\1\5"+
    "\10\11\2\5\2\11\2\5\26\11\1\5\7\11\1\5"+
    "\2\11\1\5\5\11\2\5\1\0\1\11\7\0\2\5"+
    "\2\0\2\5\3\0\7\5\3\0\4\5\2\11\1\5"+
    "\3\11\2\0\2\5\12\0\1\5\1\11\20\5\1\0"+
    "\1\11\1\5\6\11\3\5\3\11\1\5\4\11\3\5"+
    "\2\11\1\5\1\11\1\5\2\11\3\5\2\11\3\5"+
    "\3\11\3\5\14\11\4\5\5\0\3\5\3\0\1\5"+
    "\4\0\2\5\1\11\6\5\1\0\16\5\12\0\11\5"+
    "\1\11\6\5\5\0\10\11\1\5\3\11\1\5\27\11"+
    "\1\5\20\11\3\5\1\11\7\0\1\5\3\0\1\5"+
    "\4\0\7\5\2\0\1\5\3\11\5\5\2\11\2\0"+
    "\2\5\12\0\20\5\1\11\3\0\1\5\10\11\1\5"+
    "\3\11\1\5\27\11\1\5\12\11\1\5\5\11\2\5"+
    "\1\0\1\11\7\0\1\5\3\0\1\5\4\0\7\5"+
    "\2\0\7\5\1\11\1\5\2\11\2\0\2\5\12\0"+
    "\1\5\2\11\15\5\4\0\11\11\1\5\3\11\1\5"+
    "\51\11\2\0\1\11\7\0\1\5\3\0\1\5\4\0"+
    "\1\11\5\5\3\11\1\0\7\5\3\11\2\0\2\5"+
    "\12\0\12\5\6\11\1\5\3\0\1\5\22\11\3\5"+
    "\30\11\1\5\11\11\1\5\1\11\2\5\7\11\3\5"+
    "\1\0\4\5\6\0\1\5\1\0\1\5\10\0\6\5"+
    "\12\0\2\5\2\0\15\5\60\11\1\0\2\11\7\0"+
    "\4\5\10\11\10\0\1\5\12\0\47\5\2\11\1\5"+
    "\1\11\1\5\5\11\1\5\30\11\1\5\1\11\1\5"+
    "\12\11\1\0\2\11\11\0\1\11\2\5\5\11\1\5"+
    "\1\11\1\5\6\0\2\5\12\0\2\5\4\11\40\5"+
    "\1\11\27\5\2\0\6\5\12\0\13\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\2\0\10\11\1\5\44\11"+
    "\4\5\24\0\1\5\2\0\5\11\13\0\1\5\44\0"+
    "\11\5\1\0\71\5\53\11\24\0\1\11\12\0\6\5"+
    "\6\11\4\0\4\11\3\0\1\11\3\0\2\11\7\0"+
    "\3\11\4\0\15\11\14\0\1\11\17\0\2\5\46\11"+
    "\1\5\1\11\5\5\1\11\2\5\53\11\1\5\115\11"+
    "\1\5\4\11\2\5\7\11\1\5\1\11\1\5\4\11"+
    "\2\5\51\11\1\5\4\11\2\5\41\11\1\5\4\11"+
    "\2\5\7\11\1\5\1\11\1\5\4\11\2\5\17\11"+
    "\1\5\71\11\1\5\4\11\2\5\103\11\2\5\3\0"+
    "\40\5\20\11\20\5\126\11\2\5\6\11\3\5\u016c\11"+
    "\2\5\21\11\1\63\32\11\5\5\113\11\3\5\13\11"+
    "\7\5\15\11\1\5\4\11\3\0\13\5\22\11\3\0"+
    "\13\5\22\11\2\0\14\5\15\11\1\5\3\11\1\5"+
    "\2\0\14\5\64\11\40\0\3\5\1\11\3\5\2\11"+
    "\1\0\2\5\12\0\41\5\4\0\1\5\12\0\6\5"+
    "\131\11\7\5\5\11\2\0\42\11\1\0\1\11\5\5"+
    "\106\11\12\5\37\11\1\5\14\0\4\5\14\0\12\5"+
    "\12\0\36\11\2\5\5\11\13\5\54\11\4\5\32\11"+
    "\6\5\12\0\46\5\27\11\5\0\4\5\65\11\12\0"+
    "\1\5\35\0\2\5\13\0\6\5\12\0\15\5\1\11"+
    "\10\5\16\0\1\5\2\0\77\5\5\0\57\11\21\0"+
    "\7\11\4\5\12\0\21\5\11\0\14\5\3\0\36\11"+
    "\15\0\2\11\12\0\54\11\16\0\14\5\44\11\24\0"+
    "\10\5\12\0\3\5\3\11\12\0\44\11\2\5\11\11"+
    "\7\5\53\11\2\5\3\11\20\5\3\0\1\5\25\0"+
    "\4\11\1\0\6\11\1\0\2\11\3\0\1\11\5\5"+
    "\300\11\72\0\1\5\5\0\26\11\2\5\6\11\2\5"+
    "\46\11\2\5\6\11\2\5\10\11\1\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\37\11\2\5\65\11\1\5"+
    "\7\11\1\5\1\11\3\5\3\11\1\5\7\11\3\5"+
    "\4\11\2\5\6\11\4\5\15\11\5\5\3\11\1\5"+
    "\7\11\3\5\13\63\5\0\30\5\2\3\5\0\1\63"+
    "\17\5\2\11\23\5\1\11\12\5\1\63\5\0\1\5"+
    "\12\0\1\5\1\11\15\5\1\11\20\5\15\11\3\5"+
    "\40\11\20\5\15\0\4\5\1\0\3\5\14\0\21\5"+
    "\1\11\4\5\1\11\2\5\12\11\1\5\1\11\3\5"+
    "\5\11\6\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\4\11\1\5\13\11\2\5\4\11\5\5\5\11\4\5"+
    "\1\11\21\5\51\11\u0177\5\57\11\1\5\57\11\1\5"+
    "\205\11\6\5\4\11\3\0\2\11\14\5\46\11\1\5"+
    "\1\11\5\5\1\11\2\5\70\11\7\5\1\11\17\5"+
    "\1\0\27\11\11\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\40\0\57\5\1\11\320\5\1\63"+
    "\4\5\3\11\31\5\11\11\6\0\1\5\5\11\2\5"+
    "\5\11\4\5\126\11\2\5\2\0\2\5\3\11\1\5"+
    "\132\11\1\5\4\11\5\5\53\11\1\5\136\11\21\5"+
    "\40\11\60\5\320\11\100\5\375\11\3\5\215\11\103\5"+
    "\56\11\2\5\15\11\3\5\20\11\12\0\2\11\24\5"+
    "\57\11\1\0\4\5\12\0\1\5\37\11\2\0\120\11"+
    "\2\0\45\5\11\11\2\5\147\11\2\5\65\11\2\5"+
    "\11\11\52\5\15\11\1\0\3\11\1\0\4\11\1\0"+
    "\27\11\5\0\4\5\1\0\13\5\1\11\7\5\64\11"+
    "\14\5\2\0\62\11\22\0\12\5\12\0\6\5\22\0"+
    "\6\11\3\5\1\11\1\5\2\11\13\0\34\11\10\0"+
    "\2\5\27\11\15\0\14\5\35\11\3\5\4\0\57\11"+
    "\16\0\16\5\1\11\12\0\6\5\5\11\1\0\12\11"+
    "\12\0\5\11\1\5\51\11\16\0\11\5\3\11\1\0"+
    "\10\11\2\0\2\5\12\0\6\5\27\11\3\5\1\11"+
    "\3\0\62\11\1\0\1\11\3\0\2\11\2\0\5\11"+
    "\2\0\1\11\1\0\1\11\30\5\3\11\2\5\13\11"+
    "\5\0\2\5\3\11\2\0\12\5\6\11\2\5\6\11"+
    "\2\5\6\11\11\5\7\11\1\5\7\11\1\5\53\11"+
    "\1\5\16\11\6\5\163\11\10\0\1\5\2\0\2\5"+
    "\12\0\6\5\244\11\14\5\27\11\4\5\61\11\4\5"+
    "\u0100\64\156\11\2\5\152\11\46\5\7\11\14\5\5\11"+
    "\5\5\1\11\1\0\12\11\1\5\15\11\1\5\5\11"+
    "\1\5\1\11\1\5\2\11\1\5\2\11\1\5\154\11"+
    "\41\5\153\11\22\5\100\11\2\5\66\11\50\5\15\11"+
    "\3\5\20\0\20\5\20\0\3\5\2\11\30\5\3\11"+
    "\31\5\1\11\6\5\5\11\1\5\207\11\2\5\1\0"+
    "\4\5\1\11\13\5\12\0\7\5\32\11\4\5\1\11"+
    "\1\5\32\11\13\5\131\11\3\5\6\11\2\5\6\11"+
    "\2\5\6\11\2\5\3\11\3\5\2\11\3\5\2\11"+
    "\22\5\3\0\4\5\14\11\1\5\32\11\1\5\23\11"+
    "\1\5\2\11\1\5\17\11\2\5\16\11\42\5\173\11"+
    "\105\5\65\11\210\5\1\0\202\5\35\11\3\5\61\11"+
    "\17\5\1\0\37\5\40\11\15\5\36\11\5\5\46\11"+
    "\5\0\5\5\36\11\2\5\44\11\4\5\10\11\1\5"+
    "\5\11\52\5\236\11\2\5\12\0\6\5\44\11\4\5"+
    "\44\11\4\5\50\11\10\5\64\11\234\5\67\11\11\5"+
    "\26\11\12\5\10\11\230\5\6\11\2\5\1\11\1\5"+
    "\54\11\1\5\2\11\3\5\1\11\2\5\27\11\12\5"+
    "\27\11\11\5\37\11\101\5\23\11\1\5\2\11\12\5"+
    "\26\11\12\5\32\11\106\5\70\11\6\5\2\11\100\5"+
    "\1\11\3\0\1\5\2\0\5\5\4\0\4\11\1\5"+
    "\3\11\1\5\35\11\2\5\3\0\4\5\1\0\40\5"+
    "\35\11\3\5\35\11\43\5\10\11\1\5\34\11\2\0"+
    "\31\5\66\11\12\5\26\11\12\5\23\11\15\5\22\11"+
    "\156\5\111\11\67\5\63\11\15\5\63\11\15\5\44\11"+
    "\4\0\10\5\12\0\u0146\5\52\11\1\5\2\0\3\5"+
    "\2\11\116\5\35\11\12\5\1\11\10\5\26\11\13\0"+
    "\137\5\25\11\33\5\27\11\11\5\3\0\65\11\17\0"+
    "\37\5\12\0\17\5\4\0\55\11\13\0\2\5\1\0"+
    "\17\5\1\0\2\5\31\11\7\5\12\0\6\5\3\0"+
    "\44\11\16\0\1\5\12\0\4\5\1\11\2\0\1\11"+
    "\10\5\43\11\1\0\2\5\1\11\11\5\3\0\60\11"+
    "\16\0\4\11\4\5\4\0\1\5\14\0\1\11\1\5"+
    "\1\11\43\5\22\11\1\5\31\11\14\0\6\5\1\0"+
    "\101\5\7\11\1\5\1\11\1\5\4\11\1\5\17\11"+
    "\1\5\12\11\7\5\57\11\14\0\5\5\12\0\6\5"+
    "\4\0\1\5\10\11\2\5\2\11\2\5\26\11\1\5"+
    "\7\11\1\5\2\11\1\5\5\11\1\5\2\0\1\11"+
    "\7\0\2\5\2\0\2\5\3\0\2\5\1\11\6\5"+
    "\1\0\5\5\5\11\2\0\2\5\7\0\3\5\5\0"+
    "\213\5\65\11\22\0\4\11\5\5\12\0\4\5\1\0"+
    "\3\11\36\5\60\11\24\0\2\11\1\5\1\11\10\5"+
    "\12\0\246\5\57\11\7\0\2\5\11\0\27\5\4\11"+
    "\2\0\42\5\60\11\21\0\3\5\1\11\13\5\12\0"+
    "\46\5\53\11\15\0\1\11\7\5\12\0\66\5\33\11"+
    "\2\5\17\0\4\5\12\0\306\5\54\11\17\0\145\5"+
    "\100\11\12\0\25\5\10\11\2\5\1\11\2\5\10\11"+
    "\1\5\2\11\1\5\30\11\6\0\1\5\2\0\2\5"+
    "\4\0\1\11\1\0\1\11\2\0\14\5\12\0\106\5"+
    "\10\11\2\5\47\11\7\0\2\5\7\0\1\11\1\5"+
    "\1\11\1\0\33\5\1\11\12\0\50\11\7\0\1\11"+
    "\4\0\10\5\1\0\10\5\1\11\13\0\56\11\20\0"+
    "\3\5\1\11\42\5\71\11\7\5\11\11\1\5\45\11"+
    "\10\0\1\5\10\0\1\11\17\5\12\0\30\5\36\11"+
    "\2\5\26\0\1\5\16\0\111\5\7\11\1\5\2\11"+
    "\1\5\46\11\6\0\3\5\1\0\1\5\2\0\1\5"+
    "\7\0\1\11\1\0\10\5\12\0\6\5\6\11\1\5"+
    "\2\11\1\5\40\11\5\0\1\5\2\0\1\5\5\0"+
    "\1\11\7\5\12\0\u0136\5\23\11\4\0\271\5\1\11"+
    "\54\5\4\11\37\5\232\11\146\5\157\11\21\5\304\11"+
    "\274\5\57\11\1\5\11\0\307\5\107\11\271\5\71\11"+
    "\7\5\37\11\1\5\12\0\146\5\36\11\2\5\5\0"+
    "\13\5\60\11\7\0\11\5\4\11\14\5\12\0\11\5"+
    "\25\11\5\5\23\11\260\5\100\11\200\5\113\11\4\5"+
    "\1\0\1\11\67\0\7\5\4\0\15\11\100\5\2\11"+
    "\1\5\1\11\1\0\13\5\2\0\16\5\370\11\10\5"+
    "\326\11\52\5\11\11\367\5\37\11\61\5\3\11\21\5"+
    "\4\11\10\5\u018c\11\4\5\153\11\5\5\15\11\3\5"+
    "\11\11\7\5\12\11\3\5\2\0\1\5\4\0\301\5"+
    "\5\0\3\5\26\0\2\5\7\0\36\5\4\0\224\5"+
    "\3\0\273\5\125\11\1\5\107\11\1\5\2\11\2\5"+
    "\1\11\2\5\2\11\2\5\4\11\1\5\14\11\1\5"+
    "\1\11\1\5\7\11\1\5\101\11\1\5\4\11\2\5"+
    "\10\11\1\5\7\11\1\5\34\11\1\5\4\11\1\5"+
    "\5\11\1\5\1\11\3\5\7\11\1\5\u0154\11\2\5"+
    "\31\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\37\11\1\5\31\11\1\5"+
    "\37\11\1\5\31\11\1\5\10\11\2\5\151\0\4\5"+
    "\62\0\10\5\1\0\16\5\1\0\26\5\5\0\1\5"+
    "\17\0\120\5\7\0\1\5\21\0\2\5\7\0\1\5"+
    "\2\0\1\5\5\0\325\5\55\11\3\5\7\0\7\11"+
    "\2\5\12\0\4\5\1\11\u0171\5\54\11\16\0\5\5"+
    "\306\11\13\5\7\0\51\5\104\11\7\0\1\11\4\5"+
    "\12\0\u0156\5\1\11\117\5\4\11\1\5\33\11\1\5"+
    "\2\11\1\5\1\11\2\5\1\11\1\5\12\11\1\5"+
    "\4\11\1\5\1\11\1\5\1\11\6\5\1\11\4\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\3\11\1\5"+
    "\2\11\1\5\1\11\2\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\2\11\1\5"+
    "\1\11\2\5\4\11\1\5\7\11\1\5\4\11\1\5"+
    "\4\11\1\5\1\11\1\5\12\11\1\5\21\11\5\5"+
    "\3\11\1\5\5\11\1\5\21\11\u0134\5\12\0\6\5"+
    "\336\11\42\5\65\11\13\5\336\11\2\5\u0182\11\16\5"+
    "\u0131\11\37\5\36\11\342\5\113\11\266\5\1\0\36\5"+
    "\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\15\0\1\2\2\0\1\3\1\4\1\5"+
    "\1\6\1\5\1\3\1\7\1\10\1\11\2\12\1\13"+
    "\1\14\1\15\1\16\21\17\1\1\1\4\1\20\1\6"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\6\1\27"+
    "\1\30\1\31\1\32\1\33\1\6\1\34\3\22\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\20\1\47\1\50\1\51\2\52\1\53\1\2"+
    "\1\4\1\14\1\54\23\17\2\0\1\55\3\22\3\20"+
    "\1\52\2\0\1\53\21\17\1\56\3\17\1\20\2\22"+
    "\1\57\1\22\4\20\3\17\1\60\16\17\1\61\1\17"+
    "\2\22\4\20\1\62\1\63\1\17\1\64\7\17\1\65"+
    "\4\17\1\66\1\67\1\22\4\20\4\17\1\70\5\17"+
    "\1\71\1\72\3\20\1\73\1\17\1\74\5\17\1\75"+
    "\1\76\1\20\2\17\1\77\1\17\1\20\1\17\1\100"+
    "\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u0459"+
    "\0\u0459\0\u04c3\0\u04f8\0\u0459\0\u0459\0\u0459\0\u0459\0\u052d"+
    "\0\u0459\0\u0562\0\u0459\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb"+
    "\0\u09f0\0\u0459\0\u0a25\0\u0459\0\u0459\0\u0459\0\u0459\0\u0a5a"+
    "\0\u0a8f\0\u0459\0\u0459\0\u0459\0\u0459\0\u0ac4\0\u0459\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0459\0\u0459\0\u0459\0\u0b98\0\u0459\0\u0459"+
    "\0\u0459\0\u0459\0\u0459\0\u0459\0\u0bcd\0\u0459\0\u0459\0\u0459"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u04f8\0\u0d40"+
    "\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u0459\0\u1199\0\u11ce\0\u1203"+
    "\0\u1238\0\u126d\0\u12a2\0\u0459\0\u12d7\0\u130c\0\u0459\0\u1341"+
    "\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691"+
    "\0\u05cc\0\u16c6\0\u16fb\0\u1730\0\u0459\0\u0459\0\u1765\0\u0a25"+
    "\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d"+
    "\0\u05cc\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u05cc"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u05cc"+
    "\0\u05cc\0\u1d9b\0\u05cc\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u05cc\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u05cc"+
    "\0\u0a25\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155"+
    "\0\u218a\0\u21bf\0\u05cc\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8"+
    "\0\u05cc\0\u0a25\0\u22fd\0\u2332\0\u2367\0\u09bb\0\u239c\0\u05cc"+
    "\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u09bb\0\u09bb\0\u24da"+
    "\0\u250f\0\u2544\0\u05cc\0\u2579\0\u25ae\0\u25e3\0\u09bb\0\u05cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\26\1\27\1\30\1\31\1\32\1\26\1\27\7\26"+
    "\1\33\6\26\1\34\32\26\1\35\1\26\1\31\1\26"+
    "\1\31\1\36\1\27\1\37\1\36\1\40\1\36\1\27"+
    "\1\36\1\41\1\42\13\36\1\43\1\42\4\36\24\42"+
    "\6\36\1\31\1\27\1\37\1\31\1\40\1\31\1\27"+
    "\2\31\1\44\14\31\1\44\4\31\24\44\6\31\1\36"+
    "\1\27\1\37\1\36\1\40\1\36\1\27\2\36\1\45"+
    "\14\36\1\45\4\36\1\46\1\45\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\45\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\2\45\6\36\1\66"+
    "\1\27\1\37\1\66\1\40\1\66\1\67\56\66\1\31"+
    "\1\27\1\37\1\31\1\40\1\31\1\27\2\31\1\70"+
    "\5\31\1\71\6\31\1\70\4\31\24\70\7\31\1\27"+
    "\1\37\1\31\1\40\1\31\1\27\1\72\1\43\1\73"+
    "\1\74\1\75\1\76\1\77\1\31\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\43\1\73\1\106\2\31\1\107"+
    "\1\110\4\73\1\111\14\73\1\112\1\73\1\113\1\114"+
    "\1\115\4\31\1\27\1\37\1\31\1\40\1\31\1\27"+
    "\2\31\1\116\10\31\1\117\3\31\1\116\4\31\24\116"+
    "\7\31\1\27\1\37\1\31\1\40\1\31\1\27\2\31"+
    "\1\42\3\31\1\120\3\31\1\121\1\31\1\122\2\31"+
    "\1\42\4\31\24\42\6\31\1\26\1\27\1\37\1\26"+
    "\1\40\1\26\1\27\12\26\1\123\43\26\1\31\1\27"+
    "\1\37\1\31\1\40\1\31\1\27\2\31\1\70\14\31"+
    "\1\70\1\124\3\31\15\70\1\125\6\70\7\31\1\27"+
    "\1\37\1\31\1\40\1\31\1\27\2\31\1\42\6\31"+
    "\1\101\5\31\1\42\2\31\1\126\1\31\24\42\7\31"+
    "\1\27\1\37\1\31\1\40\1\31\1\27\2\31\1\70"+
    "\14\31\1\70\1\127\3\31\24\70\6\31\1\130\1\27"+
    "\1\37\1\130\1\40\1\130\1\27\2\130\1\42\3\130"+
    "\1\120\3\130\1\121\4\130\1\42\4\130\24\42\7\130"+
    "\1\27\1\37\1\130\1\40\1\130\1\27\2\130\1\70"+
    "\14\130\1\70\4\130\24\70\6\130\7\31\1\131\67\31"+
    "\1\132\104\31\1\133\32\31\1\134\1\27\1\37\1\134"+
    "\1\40\1\134\1\135\2\134\1\136\14\134\1\136\4\134"+
    "\24\136\6\134\1\31\1\27\1\37\1\31\1\40\1\31"+
    "\1\27\57\31\1\27\1\37\1\31\1\40\1\31\1\27"+
    "\2\31\1\42\3\31\1\120\3\31\1\121\4\31\1\42"+
    "\4\31\24\42\6\31\66\0\1\27\4\0\1\27\60\0"+
    "\1\30\100\0\1\137\50\0\1\37\62\0\1\42\10\0"+
    "\1\42\4\0\3\42\5\0\1\42\4\0\24\42\3\0"+
    "\1\42\2\0\1\44\10\0\1\44\4\0\3\44\5\0"+
    "\1\44\4\0\24\44\3\0\1\44\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\24\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\11\45\1\140\12\45\3\0\1\45\2\0"+
    "\1\45\10\0\1\45\4\0\3\45\5\0\1\45\4\0"+
    "\11\45\1\141\12\45\3\0\1\45\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\7\45\1\142"+
    "\14\45\3\0\1\45\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\13\45\1\143\10\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\7\45\1\144\14\45\3\0\1\45\2\0"+
    "\1\45\10\0\1\45\4\0\3\45\5\0\1\45\4\0"+
    "\4\45\1\145\17\45\3\0\1\45\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\13\45\1\146"+
    "\10\45\3\0\1\45\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\1\147\23\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\14\45\1\150\7\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\1\151"+
    "\23\45\3\0\1\45\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\22\45\1\152\1\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\1\153\15\45\1\154\2\45\1\155\2\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\4\45\1\156\17\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\4\45\1\157\7\45\1\160\7\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\23\45\1\161\3\0\1\45\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\17\45\1\162"+
    "\4\45\3\0\1\45\2\0\1\66\2\0\1\66\1\0"+
    "\61\66\1\27\1\0\1\66\1\0\1\66\1\67\56\66"+
    "\1\70\10\0\1\70\4\0\3\70\5\0\1\70\4\0"+
    "\24\70\3\0\1\70\21\0\1\163\45\0\1\73\10\0"+
    "\1\73\4\0\3\73\5\0\1\73\4\0\24\73\3\0"+
    "\1\73\21\0\1\164\65\0\1\101\75\0\1\165\33\0"+
    "\1\73\10\0\1\73\4\0\3\73\5\0\1\73\4\0"+
    "\17\73\1\166\4\73\3\0\1\73\2\0\1\73\10\0"+
    "\1\73\4\0\3\73\5\0\1\73\4\0\21\73\1\167"+
    "\2\73\3\0\1\73\2\0\1\73\10\0\1\73\4\0"+
    "\3\73\5\0\1\73\4\0\1\170\23\73\3\0\1\73"+
    "\2\0\1\116\10\0\1\116\4\0\3\116\5\0\1\116"+
    "\4\0\24\116\3\0\1\116\2\0\1\70\10\0\1\70"+
    "\4\0\3\70\5\0\1\70\4\0\1\171\15\70\1\172"+
    "\2\70\1\173\2\70\3\0\1\70\2\0\7\131\1\174"+
    "\20\131\1\175\34\131\12\132\1\174\15\132\1\176\34\132"+
    "\20\0\1\133\5\0\1\133\3\0\1\177\24\133\6\0"+
    "\1\134\2\0\1\134\1\0\61\134\1\27\1\0\1\134"+
    "\1\0\1\134\1\135\56\134\1\136\2\0\1\134\1\0"+
    "\4\134\1\136\4\134\3\136\5\134\1\136\4\134\24\136"+
    "\3\134\1\136\2\134\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\7\45\1\200\14\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\1\201\23\45\3\0\1\45\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\1\202\23\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\21\45\1\203\2\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\4\45\1\204\17\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\13\45"+
    "\1\205\10\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\20\45\1\206\3\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\13\45\1\207\10\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\3\45\1\210\20\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\12\45"+
    "\1\211\11\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\4\45\1\212\17\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\2\45\1\213\13\45\1\214\5\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\7\45\1\215\4\45\1\216\7\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\1\45\1\217\22\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\20\45\1\220\3\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\4\45"+
    "\1\221\17\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\21\45\1\222\2\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\15\45\1\223\6\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\7\45\1\224\14\45\3\0\1\45\21\0\1\225"+
    "\64\0\1\226\45\0\1\73\10\0\1\73\4\0\3\73"+
    "\5\0\1\73\4\0\23\73\1\227\3\0\1\73\2\0"+
    "\1\73\10\0\1\73\4\0\3\73\5\0\1\73\4\0"+
    "\13\73\1\230\10\73\3\0\1\73\2\0\1\73\10\0"+
    "\1\73\4\0\3\73\5\0\1\73\4\0\16\73\1\231"+
    "\5\73\3\0\1\73\2\0\1\70\10\0\1\70\4\0"+
    "\3\70\5\0\1\70\4\0\2\70\1\232\21\70\3\0"+
    "\1\70\2\0\1\70\10\0\1\70\4\0\3\70\5\0"+
    "\1\70\4\0\7\70\1\233\4\70\1\234\7\70\3\0"+
    "\1\70\2\0\1\70\10\0\1\70\4\0\3\70\5\0"+
    "\1\70\4\0\1\70\1\235\22\70\3\0\1\70\2\0"+
    "\1\131\1\0\1\131\1\0\2\131\1\0\53\131\2\0"+
    "\1\131\1\132\1\0\1\132\1\0\2\132\1\0\53\132"+
    "\2\0\1\132\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\1\236\23\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\17\45"+
    "\1\237\4\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\6\45\1\240\15\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\12\45\1\241\11\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\11\45\1\242\12\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\4\45"+
    "\1\243\17\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\4\45\1\244\17\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\6\45\1\245\15\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\21\45\1\246\2\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\4\45"+
    "\1\247\17\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\16\45\1\250\5\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\10\45\1\251\13\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\1\252\23\45\3\0\1\45\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\22\45\1\253"+
    "\1\45\3\0\1\45\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\20\45\1\254\3\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\11\45\1\255\12\45\3\0\1\45\2\0"+
    "\1\45\10\0\1\45\4\0\3\45\5\0\1\45\4\0"+
    "\21\45\1\256\2\45\3\0\1\45\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\16\45\1\257"+
    "\5\45\3\0\1\45\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\4\45\1\260\17\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\13\45\1\261\10\45\3\0\1\45\2\0"+
    "\1\73\10\0\1\73\4\0\3\73\5\0\1\73\4\0"+
    "\13\73\1\262\10\73\3\0\1\73\2\0\1\73\10\0"+
    "\1\73\4\0\3\73\5\0\1\73\4\0\1\263\23\73"+
    "\3\0\1\73\2\0\1\70\10\0\1\70\4\0\3\70"+
    "\5\0\1\70\4\0\10\70\1\264\13\70\3\0\1\70"+
    "\2\0\1\70\10\0\1\70\4\0\3\70\5\0\1\70"+
    "\4\0\22\70\1\265\1\70\3\0\1\70\2\0\1\70"+
    "\10\0\1\70\4\0\3\70\5\0\1\70\4\0\20\70"+
    "\1\266\3\70\3\0\1\70\2\0\1\70\10\0\1\70"+
    "\4\0\3\70\5\0\1\70\4\0\11\70\1\267\12\70"+
    "\3\0\1\70\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\17\45\1\270\4\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\17\45\1\271\4\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\13\45"+
    "\1\272\10\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\3\45\1\273\20\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\16\45\1\274\5\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\16\45\1\275\5\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\21\45"+
    "\1\276\2\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\11\45\1\277\12\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\17\45\1\300\4\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\11\45\1\301\12\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\1\302"+
    "\23\45\3\0\1\45\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\12\45\1\303\11\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\1\304\23\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\4\45"+
    "\1\305\17\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\7\45\1\306\14\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\16\45\1\307\5\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\2\45\1\277\21\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\6\45"+
    "\1\310\15\45\3\0\1\45\2\0\1\73\10\0\1\73"+
    "\4\0\3\73\5\0\1\73\4\0\2\73\1\311\21\73"+
    "\3\0\1\73\2\0\1\73\10\0\1\73\4\0\3\73"+
    "\5\0\1\73\4\0\16\73\1\312\5\73\3\0\1\73"+
    "\2\0\1\70\10\0\1\70\4\0\3\70\5\0\1\70"+
    "\4\0\1\313\23\70\3\0\1\70\2\0\1\70\10\0"+
    "\1\70\4\0\3\70\5\0\1\70\4\0\1\314\23\70"+
    "\3\0\1\70\2\0\1\70\10\0\1\70\4\0\3\70"+
    "\5\0\1\70\4\0\4\70\1\315\17\70\3\0\1\70"+
    "\2\0\1\70\10\0\1\70\4\0\3\70\5\0\1\70"+
    "\4\0\7\70\1\316\14\70\3\0\1\70\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\14\45"+
    "\1\317\7\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\7\45\1\320\14\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\5\45\1\321\16\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\1\322\23\45\3\0\1\45\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\4\45\1\323"+
    "\17\45\3\0\1\45\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\15\45\1\324\6\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\14\45\1\325\7\45\3\0\1\45\2\0"+
    "\1\45\10\0\1\45\4\0\3\45\5\0\1\45\4\0"+
    "\6\45\1\326\15\45\3\0\1\45\2\0\1\45\10\0"+
    "\1\45\4\0\3\45\5\0\1\45\4\0\20\45\1\327"+
    "\3\45\3\0\1\45\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\2\45\1\330\21\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\2\45\1\331\21\45\3\0\1\45\2\0"+
    "\1\45\10\0\1\45\4\0\3\45\5\0\1\45\4\0"+
    "\13\45\1\260\10\45\3\0\1\45\2\0\1\73\10\0"+
    "\1\73\4\0\3\73\5\0\1\73\4\0\6\73\1\332"+
    "\15\73\3\0\1\73\2\0\1\70\10\0\1\70\4\0"+
    "\3\70\5\0\1\70\4\0\6\70\1\333\15\70\3\0"+
    "\1\70\2\0\1\70\10\0\1\70\4\0\3\70\5\0"+
    "\1\70\4\0\20\70\1\334\3\70\3\0\1\70\2\0"+
    "\1\70\10\0\1\70\4\0\3\70\5\0\1\70\4\0"+
    "\2\70\1\335\21\70\3\0\1\70\2\0\1\70\10\0"+
    "\1\70\4\0\3\70\5\0\1\70\4\0\2\70\1\336"+
    "\21\70\3\0\1\70\2\0\1\45\10\0\1\45\4\0"+
    "\3\45\5\0\1\45\4\0\17\45\1\337\4\45\3\0"+
    "\1\45\2\0\1\45\10\0\1\45\4\0\3\45\5\0"+
    "\1\45\4\0\2\45\1\340\21\45\3\0\1\45\2\0"+
    "\1\45\10\0\1\45\4\0\3\45\5\0\1\45\4\0"+
    "\1\341\23\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\6\45\1\342\15\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\1\343\23\45\3\0\1\45\2\0"+
    "\1\45\10\0\1\45\4\0\3\45\5\0\1\45\4\0"+
    "\1\344\23\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\4\45\1\310\17\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\4\45\1\331\17\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\20\45\1\345\3\45\3\0\1\45\2\0\1\70"+
    "\10\0\1\70\4\0\3\70\5\0\1\70\4\0\4\70"+
    "\1\346\17\70\3\0\1\70\2\0\1\70\10\0\1\70"+
    "\4\0\3\70\5\0\1\70\4\0\4\70\1\347\17\70"+
    "\3\0\1\70\2\0\1\70\10\0\1\70\4\0\3\70"+
    "\5\0\1\70\4\0\20\70\1\350\3\70\3\0\1\70"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\20\45\1\351\3\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\2\45"+
    "\1\352\21\45\3\0\1\45\2\0\1\45\10\0\1\45"+
    "\4\0\3\45\5\0\1\45\4\0\4\45\1\353\17\45"+
    "\3\0\1\45\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\2\45\1\326\21\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\3\45\1\260\20\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\4\45"+
    "\1\354\17\45\3\0\1\45\2\0\1\70\10\0\1\70"+
    "\4\0\3\70\5\0\1\70\4\0\4\70\1\355\17\70"+
    "\3\0\1\70\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\7\45\1\356\14\45\3\0\1\45"+
    "\2\0\1\45\10\0\1\45\4\0\3\45\5\0\1\45"+
    "\4\0\4\45\1\271\17\45\3\0\1\45\2\0\1\45"+
    "\10\0\1\45\4\0\3\45\5\0\1\45\4\0\3\45"+
    "\1\331\20\45\3\0\1\45\2\0\1\70\10\0\1\70"+
    "\4\0\3\70\5\0\1\70\4\0\3\70\1\357\20\70"+
    "\3\0\1\70\2\0\1\45\10\0\1\45\4\0\3\45"+
    "\5\0\1\45\4\0\2\45\1\360\21\45\3\0\1\45"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9752];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\15\0\1\1\2\0\1\11\1\1\2\11"+
    "\2\1\4\11\1\1\1\11\1\1\1\11\26\1\1\11"+
    "\1\1\4\11\2\1\4\11\1\1\1\11\3\1\3\11"+
    "\1\1\6\11\1\1\3\11\32\1\2\0\1\11\6\1"+
    "\1\11\2\0\1\11\25\1\2\11\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 66: break;
          case 2:
            { return STRING_LITERAL;
            }
          // fall through
          case 67: break;
          case 3:
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            }
          // fall through
          case 68: break;
          case 4:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 69: break;
          case 5:
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 70: break;
          case 6:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 71: break;
          case 7:
            { yybegin(xTAG_NAME); return AT;
            }
          // fall through
          case 72: break;
          case 8:
            { yybegin(xTAG_ENUMFIELD); ;return OR;
            }
          // fall through
          case 73: break;
          case 9:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 74: break;
          case 10:
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 75: break;
          case 11:
            { return SHARP;
            }
          // fall through
          case 76: break;
          case 12:
            { return ID;
            }
          // fall through
          case 77: break;
          case 13:
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            }
          // fall through
          case 78: break;
          case 14:
            { yybegin(xCOMMENT_STRING); return ID;
            }
          // fall through
          case 79: break;
          case 15:
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            }
          // fall through
          case 80: break;
          case 16:
            { beginType(); return ID;
            }
          // fall through
          case 81: break;
          case 17:
            { yybegin(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 82: break;
          case 18:
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }
            }
          // fall through
          case 83: break;
          case 19:
            { yybegin(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 84: break;
          case 20:
            { _typeLevel++; return LPAREN;
            }
          // fall through
          case 85: break;
          case 21:
            { _typeLevel--; _typeReq = false; return RPAREN;
            }
          // fall through
          case 86: break;
          case 22:
            { _typeReq = true; return COMMA;
            }
          // fall through
          case 87: break;
          case 23:
            { return NUMBER;
            }
          // fall through
          case 88: break;
          case 24:
            { _typeReq = true; return EXTENDS;
            }
          // fall through
          case 89: break;
          case 25:
            { _typeLevel++; return LT;
            }
          // fall through
          case 90: break;
          case 26:
            { _typeLevel--; _typeReq = false; return GT;
            }
          // fall through
          case 91: break;
          case 27:
            { return NULLABLE;
            }
          // fall through
          case 92: break;
          case 28:
            { yybegin(xBACKTICK_STRING); yypushback(yylength());
            }
          // fall through
          case 93: break;
          case 29:
            { _typeLevel++; return LCURLY;
            }
          // fall through
          case 94: break;
          case 30:
            { _typeReq = true; return OR;
            }
          // fall through
          case 95: break;
          case 31:
            { _typeLevel--; _typeReq = false; return RCURLY;
            }
          // fall through
          case 96: break;
          case 32:
            { yybegin(xCLASS_EXTEND); return ID;
            }
          // fall through
          case 97: break;
          case 33:
            { yybegin(xCLASS_GENERIC); return LT;
            }
          // fall through
          case 98: break;
          case 34:
            { return COMMA;
            }
          // fall through
          case 99: break;
          case 35:
            { return EXTENDS;
            }
          // fall through
          case 100: break;
          case 36:
            { return GT;
            }
          // fall through
          case 101: break;
          case 37:
            { beginType(); return EXTENDS;
            }
          // fall through
          case 102: break;
          case 38:
            { yybegin(xFIELD_ID); yypushback(yylength());
            }
          // fall through
          case 103: break;
          case 39:
            { yybegin(xFIELD_ID); return RBRACK;
            }
          // fall through
          case 104: break;
          case 40:
            { yybegin(xFIELD_INDEX); return LBRACK;
            }
          // fall through
          case 105: break;
          case 41:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 106: break;
          case 42:
            { yybegin(xTYPE_REF); return STRING_LITERAL;
            }
          // fall through
          case 107: break;
          case 43:
            { yybegin(YYINITIAL); return STRING_LITERAL;
            }
          // fall through
          case 108: break;
          case 44:
            { return DASHES;
            }
          // fall through
          case 109: break;
          case 45:
            { _typeReq = false; return ARR;
            }
          // fall through
          case 110: break;
          case 46:
            { yybegin(xTAG); return TAG_NAME;
            }
          // fall through
          case 111: break;
          case 47:
            { return FUN;
            }
          // fall through
          case 112: break;
          case 48:
            { yybegin(xENUM); return TAG_NAME;
            }
          // fall through
          case 113: break;
          case 49:
            { beginType(); return TAG_NAME;
            }
          // fall through
          case 114: break;
          case 50:
            { yybegin(xALIAS); return TAG_NAME;
            }
          // fall through
          case 115: break;
          case 51:
            { yybegin(xCLASS); return TAG_NAME;
            }
          // fall through
          case 116: break;
          case 52:
            { yybegin(xFIELD); return TAG_NAME;
            }
          // fall through
          case 117: break;
          case 53:
            { yybegin(xPARAM); return TAG_NAME;
            }
          // fall through
          case 118: break;
          case 54:
            { yybegin(xTAG_WITH_ID); return TAG_NAME;
            }
          // fall through
          case 119: break;
          case 55:
            { return ASYNC;
            }
          // fall through
          case 120: break;
          case 56:
            { yybegin(xMODULE); return TAG_NAME;
            }
          // fall through
          case 121: break;
          case 57:
            { return TAG_NAME;
            }
          // fall through
          case 122: break;
          case 58:
            { _typeReq = true; return VARARG;
            }
          // fall through
          case 123: break;
          case 59:
            { yybegin(xFIELD_ID); return PUBLIC;
            }
          // fall through
          case 124: break;
          case 60:
            { yybegin(xGENERIC); return TAG_NAME;
            }
          // fall through
          case 125: break;
          case 61:
            { yybegin(xFIELD_ID); return PACKAGE;
            }
          // fall through
          case 126: break;
          case 62:
            { yybegin(xFIELD_ID); return PRIVATE;
            }
          // fall through
          case 127: break;
          case 63:
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            }
          // fall through
          case 128: break;
          case 64:
            { yybegin(xFIELD_ID); return PROTECTED;
            }
          // fall through
          case 129: break;
          case 65:
            { yybegin(xTAG_DIAGNOSTIC); return TAG_NAME;
            }
          // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
